1)Indexed database

window.indexedDB = window.indexedDB || window.mozIndexedDB ||window.webkitIndexedDB || window.msIndexedDB;
 
window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || 
window.msIDBTransaction;
window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;

a) create DB:
var request = window.indexedDB.open("newDatabase", 1);

request.onerror = function(event) {
            console.log("error: ");
         };
         
         request.onsuccess = function(event) {
            db = request.result;
            console.log("success: "+ db);
         };

b) create table:
request.onupgradeneeded = function(event) {
            var db = event.target.result;
            var objectStore = db.createObjectStore("employee", {keyPath: "id"});
            
            for (var i in employeeData) {
               objectStore.add(employeeData[i]);
            }
         }

c) read data 
function read() {
            var transaction = db.transaction(["employee"]);
            var objectStore = transaction.objectStore("employee");
            var request = objectStore.get("00-03");
            
            request.onerror = function(event) {
               alert("Unable to retrieve daa from database!");
            };
            
            request.onsuccess = function(event) {
               // Do something with the request.result!
               if(request.result) {
                  alert("Name: " + request.result.name + ", 
                     Age: " + request.result.age + ", Email: " + request.result.email);
               } else {
                  alert("Kenny couldn't be found in your database!");
               }
            };
         }
         
         function readAll() {
            var objectStore = db.transaction("employee").objectStore("employee");
            
            objectStore.openCursor().onsuccess = function(event) {
               var cursor = event.target.result;
               
               if (cursor) {
                  alert("Name for id " + cursor.key + " is " + cursor.value.name + ", 
                     Age: " + cursor.value.age + ", Email: " + cursor.value.email);
                  cursor.continue();
               } else {
                  alert("No more entries!");
               }
            };
         }
         
ADD)var request = db.transaction(["employee"], "readwrite")
            .objectStore("employee")
            .add({ id: "00-03", name: "Kenny", age: 19, email: "kenny@planet.org" });

DELETE) var request = db.transaction(["employee"], "readwrite")
            .objectStore("employee")
            .delete("00-03");



2) Webworker:
	var webwkr = new Worker("path.js");
	webwkr.onmessage=function(event){
		alert(event.data);
	}
	webwkr.onerror = function(event){
		alert(event.message);
	}
	webwkr.terminate();
	webwkr.postmessage({'cmd':'start','msg':'hello'});

	#########path.js########
	
	self.addEventListener('message', function(e){
		var data = e.data;
		switch(data.cmd){
			case 'start' : 
				postmessage(data.msg);
			
			case 'stop' : 
				self.close();//terminate()

			default : 
				postmessage('unrecogniged msg');

		}
	});

3) 
	window.addEventListener('online',  updateOnlineStatus);
  	window.addEventListener('offline', updateOnlineStatus);
	
	navigator.onLine 

4) Geoloaction:

	navigator.geolocation.getCurrentPosition(showPosition, errorHandler);

	function showPosition(position) {
    		x.innerHTML = "Latitude: " + position.coords.latitude + 
    		"<br>Longitude: " + position.coords.longitude;
	}

	watchPosition() - Returns the current position of the user and continues to return updated position as the user moves (like the GPS in a car).
clearWatch() - Stops the watchPosition() method.


5) Web Socket :

<script type = "text/javascript">
         function WebSocketTest() {
            
            if ("WebSocket" in window) {
               alert("WebSocket is supported by your Browser!");
               
               // Let us open a web socket
               var ws = new WebSocket("ws://localhost:9998/echo");
				
               ws.onopen = function() {
                  
                  // Web Socket is connected, send data using send()
                  ws.send("Message to send");
                  alert("Message is sent...");
               };
				
               ws.onmessage = function (evt) { 
                  var received_msg = evt.data;
                  alert("Message is received...");
               };
				
               ws.onclose = function() { 
                  
                  // websocket is closed.
                  alert("Connection is closed..."); 
               };
            } else {
              
               // The browser doesn't support WebSocket
               alert("WebSocket NOT supported by your Browser!");
            }
         }
	